'use client'

import { useState, useRef, useEffect } from 'react'

interface Message {
  id: string
  text: string
  isUser: boolean
  timestamp: Date
}

export default function SimpleChatBox() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n v·ªÅ d·ªãch v·ª• ƒë·∫∑t ph√≤ng? üòä',
      isUser: false,
      timestamp: new Date()
    }
  ])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // Predefined responses cho c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p
  const getResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase()
    
    if (message.includes('gi√°') || message.includes('price') || message.includes('cost')) {
      return 'Gi√° ph√≤ng c·ªßa ch√∫ng t√¥i dao ƒë·ªông t·ª´ 500,000 - 2,000,000 VNƒê/ƒë√™m t√πy theo lo·∫°i ph√≤ng v√† th·ªùi ƒëi·ªÉm. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt gi√° tr√™n trang web ho·∫∑c li√™n h·ªá hotline 1900-xxxx ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n c·ª• th·ªÉ.'
    }
    
    if (message.includes('ƒë·∫∑t ph√≤ng') || message.includes('booking') || message.includes('reserve')) {
      return 'ƒê·ªÉ ƒë·∫∑t ph√≤ng, b·∫°n c√≥ th·ªÉ: 1) Ch·ªçn ph√≤ng tr√™n website, 2) ƒêi·ªÅn th√¥ng tin v√† thanh to√°n, 3) Nh·∫≠n email x√°c nh·∫≠n. Ho·∫∑c g·ªçi hotline 1900-xxxx ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp.'
    }
    
    if (message.includes('h·ªßy') || message.includes('cancel')) {
      return 'B·∫°n c√≥ th·ªÉ h·ªßy ƒë·∫∑t ph√≤ng mi·ªÖn ph√≠ tr∆∞·ªõc 24h. Sau th·ªùi gian n√†y s·∫Ω c√≥ ph√≠ h·ªßy. Chi ti·∫øt xem trong ƒëi·ªÅu kho·∫£n ƒë·∫∑t ph√≤ng ho·∫∑c li√™n h·ªá hotline.'
    }
    
    if (message.includes('thanh to√°n') || message.includes('payment') || message.includes('pay')) {
      return 'Ch√∫ng t√¥i ch·∫•p nh·∫≠n thanh to√°n qua: Th·∫ª t√≠n d·ª•ng, chuy·ªÉn kho·∫£n ng√¢n h√†ng, v√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay), v√† ti·ªÅn m·∫∑t t·∫°i kh√°ch s·∫°n.'
    }
    
    if (message.includes('wifi') || message.includes('internet')) {
      return 'T·∫•t c·∫£ ph√≤ng ƒë·ªÅu c√≥ WiFi mi·ªÖn ph√≠ t·ªëc ƒë·ªô cao. M·∫≠t kh·∫©u WiFi s·∫Ω ƒë∆∞·ª£c cung c·∫•p khi b·∫°n check-in.'
    }
    
    if (message.includes('check-in') || message.includes('checkin')) {
      return 'Th·ªùi gian check-in: 14:00 - 24:00. Check-out: 12:00. B·∫°n c√≥ th·ªÉ check-in s·ªõm ho·∫∑c check-out mu·ªôn (c√≥ ph·ª• ph√≠) n·∫øu ph√≤ng c√≤n tr·ªëng.'
    }
    
    if (message.includes('ƒë·ªãa ch·ªâ') || message.includes('address') || message.includes('location')) {
      return 'ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP.HCM. Ch√∫ng t√¥i c√≥ b√£i ƒë·ªó xe mi·ªÖn ph√≠ v√† g·∫ßn c√°c ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng.'
    }
    
    if (message.includes('hotline') || message.includes('phone') || message.includes('s·ªë ƒëi·ªán tho·∫°i')) {
      return 'Hotline h·ªó tr·ª£ 24/7: 1900-xxxx. Email: support@airbnbclone.com. Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n!'
    }
    
    if (message.includes('c·∫£m ∆°n') || message.includes('thank') || message.includes('thanks')) {
      return 'C·∫£m ∆°n b·∫°n! R·∫•t vui ƒë∆∞·ª£c ph·ª•c v·ª•. N·∫øu c√≥ th·∫Øc m·∫Øc g√¨ kh√°c, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi nh√©! üòä'
    }
    
    if (message.includes('xin ch√†o') || message.includes('hello') || message.includes('hi')) {
      return 'Xin ch√†o! Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi d·ªãch v·ª• ƒë·∫∑t ph√≤ng c·ªßa ch√∫ng t√¥i. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?'
    }
    
    // Default responses
    const defaultResponses = [
      'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, vui l√≤ng g·ªçi hotline 1900-xxxx ho·∫∑c email support@airbnbclone.com',
      'T√¥i hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ xem th√™m th√¥ng tin tr√™n website ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i.',
      'Th√¥ng tin n√†y r·∫•t h·ªØu √≠ch! B·∫°n c√≥ c√¢u h·ªèi n√†o kh√°c v·ªÅ d·ªãch v·ª• ƒë·∫∑t ph√≤ng kh√¥ng?',
      'Ch√∫ng t√¥i ƒë√°nh gi√° cao ph·∫£n h·ªìi c·ªßa b·∫°n. ƒê·ªôi ng≈© h·ªó tr·ª£ s·∫Ω li√™n h·ªá l·∫°i s·ªõm nh·∫•t c√≥ th·ªÉ.',
      'C·∫£m ∆°n b·∫°n! N·∫øu c·∫ßn h·ªó tr·ª£ th√™m, vui l√≤ng li√™n h·ªá hotline 24/7: 1900-xxxx'
    ]
    
    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)]
  }

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputMessage,
      isUser: true,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsLoading(true)

    // Simulate API delay
    setTimeout(() => {
      const response = getResponse(inputMessage)
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: response,
        isUser: false,
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, botMessage])
      setIsLoading(false)
    }, 1000 + Math.random() * 1000) // Random delay 1-2 seconds
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  return (
    <>
      {/* Chat Button - Will be positioned by parent container */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white p-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 group relative z-50"
      >
        {isOpen ? (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        ) : (
          <>
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
            {/* Notification dot */}
            <div className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
            {/* Tooltip */}
            <div className="absolute right-full mr-3 top-1/2 transform -translate-y-1/2 bg-gray-900 text-white text-sm px-3 py-2 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap">
              Chat v·ªõi ch√∫ng t√¥i
              <div className="absolute left-full top-1/2 transform -translate-y-1/2 border-4 border-transparent border-l-gray-900"></div>
            </div>
          </>
        )}
      </button>

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-32 right-6 z-50 w-80 h-96 bg-white rounded-2xl shadow-2xl border border-gray-200 flex flex-col overflow-hidden animate-in slide-in-from-bottom-4 duration-300">
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-4 flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                </svg>
              </div>
              <div>
                <h3 className="font-semibold">H·ªó tr·ª£ kh√°ch h√†ng</h3>
                <p className="text-xs text-blue-100">Tr·ª±c tuy·∫øn ‚Ä¢ Th∆∞·ªùng ph·∫£n h·ªìi ngay</p>
              </div>
            </div>
            <button
              onClick={() => setIsOpen(false)}
              className="text-white/80 hover:text-white transition-colors"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-xs px-4 py-2 rounded-2xl ${
                    message.isUser
                      ? 'bg-white border border-gray-200'
                      : 'bg-gray-100'
                  }`}
                >
                  <p className={`text-sm leading-relaxed ${
                    message.isUser ? 'text-gray-900' : 'text-gray-900'
                  }`}>{message.text}</p>
                  <p className={`text-xs mt-1 ${
                    message.isUser ? 'text-gray-600' : 'text-gray-600'
                  }`}>
                    {message.timestamp.toLocaleTimeString('vi-VN', {
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </p>
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-gray-100 text-gray-800 px-4 py-2 rounded-2xl">
                  <div className="flex items-center space-x-2">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                    <span className="text-sm">ƒêang nh·∫≠p...</span>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t border-gray-200 bg-gray-50">
            <div className="flex space-x-2">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                className="flex-1 px-3 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm bg-white text-gray-900 placeholder-gray-500"
                disabled={isLoading}
              />
              <button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim() || isLoading}
                className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 disabled:opacity-50 disabled:cursor-not-allowed text-white p-2 rounded-full transition-all duration-200"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              </button>
            </div>
            <p className="text-xs text-gray-500 mt-2 text-center">
              üí° H·ªèi v·ªÅ: gi√° ph√≤ng, ƒë·∫∑t ph√≤ng, thanh to√°n, check-in...
            </p>
          </div>
        </div>
      )}
    </>
  )
}
